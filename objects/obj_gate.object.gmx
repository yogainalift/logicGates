<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///variable initialization
output = false; //output value
input1 = false; // first input (top-left)
input2 = false; // second input (bottom-left)
changed = false; //to be used for optimizations
flag = false; // flag for not recalculating the hashmap

// drag gate things
grab = false;  // flag for mouseL pressed
xx = 0;
yy = 0;
setX = x;  // store initial x
setY = y;  // store initial y


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///basic gate collision and output logic
//top left collision rect (GET REKT)
//if (!input1){
    // set up the top left rectangle 
    var x1 = x - sprite_width/2;
    var y1 = y - sprite_height/2;
    var x2 = x1 + 1;
    var y2 = y - 1;
    //check for collision with obj_wire
    in1 = collision_rectangle(x1, y1, x2, y2, obj_wire, false, true);
    
    //if there is a collision then make tag input1 as true else false
    if (in1 != noone) {
        if (in1.enabled){
            input1 = true;
       }
       else{
            input1= false;
       }
    }
//}

//bottom left collision rect (GOT REKT biaatch)
//if (!input2){
    // set up the btm left rectangle 
    var x1 = x - sprite_width/2;
    var y1 = y+1;
    var x2 = x1 + 1;
    var y2 = y + sprite_height/2;
    
    //check for collision with obj_wire
    in2 = collision_rectangle(x1, y1, x2, y2, obj_wire, false, true);
    
        //if there is a collision then make tag input2 as true else false
    if (in2 != noone){
        if (in2.enabled){
            input2 = true;
        } else{
            input2= false;
       }
    }
//}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// drag
if (grab == false)
{
    exit;
}
else
{
    x = mouse_x + xx;
    y = mouse_y + yy;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grab = false;
// if the gate collides with the object make it stay there
inst = instance_place(x, y, obj_box);
if (inst != noone)
{
    // get the instance number to get the object's position
    x = inst.x;
    y = inst.y;
}
else
{
    x = setX;  // return to initial pos
    y = setY;  // return to initial pos
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///grab trying stuff that did not work
/*
grab = false;
depth= -10;
// if the gate collides with the object make it stay there
box_inst = instance_place(x, y, obj_box);
gate_inst = instance_place(x,y,obj_gate);
if (box_inst != noone){
    x = box_inst.x;
    y = box_inst.y;
    
    if (box_inst.object_inside == 0){
        box_inst.object_inside = self.id;
        show_debug_message("inside me: "+ string(self.id));
    }
    else{
        with(box_inst.object_inside){
            x = setX;  
            y = setY; 
        }
        with (gate_inst){
           
            show_debug_message("is false should send back bitch");
        }
    }    
}
if (gate_inst &gt; 0 ){
    
}

/*
in1 = collision_rectangle(x-20, y-27, x+20, y+27, obj_box, false, true);
if (in1!= noone){
    show_debug_message("hello you bitch");
}



if (gate_inst != noone){

    instance_deactivate_object(gate_inst);
    box_inst = instance_place(x, y, obj_box);
    if (box_inst != noone){
        // get the instance number to get the object's position
        x = box_inst.x;
        y = box_inst.y;
        instance_activate_all();
        with (gate_inst){
            show_debug_message(x);
            
            x = setX;  
            y = setY;  
            show_debug_message(x);
        }
    }
    else {
        x = setX;
        y = setY;
    }        
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///drag
grab = true;
depth = -20;

//get relative click position
xx = x - mouse_x;
yy = y - mouse_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
