<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///variable initialization
//gate stuff
output = false; //output value
input1 = false; // first input (top-left)
input2 = false; // second input (bottom-left)
changed = false; //to be used for optimizations
flag = false; // flag for not recalculating the hashmap

// drag gate things
grab = false;  // flag for mouseL pressed
xx = 0;
yy = 0;
setX = x;  // store initial x
setY = y;  // store initial y

inBox = 0; // id of the box this gate is in, used for swapping gates with another box
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///basic gate collision and output logic
//top left collision rect (GET REKT)
//if (!input1){
    
    // set up the top left rectangle 
    var x1 = x - sprite_width/2;
    var y1 = y - sprite_height/2 ;
    var x2 = x1 + 1;
    var y2 = y - 5;
    //check for collision with obj_wire
    in1 = collision_rectangle(x1, y1, x2, y2, obj_wire, false, true);
    //if there is a collision then make tag input1 as true else false
    if (in1 != noone) {
        if (in1.enabled){
            input1 = true;
       }
       else{
            input1= false;
       }
    }
//}

//bottom left collision rect (GOT REKT biaatch)
//if (!input2){
    // set up the btm left rectangle
    var x1 = x - sprite_width/2;
    var y1 = y+5;
    var x2 = x1 + 1;
    var y2 = y + sprite_height/2;
    //check for collision with obj_wire
    in2 = collision_rectangle(x1, y1, x2, y2, obj_wire, false, true);
    
    //if there is a collision then make tag input2 as true else false
    if (in2 != noone){
        if (in2.enabled){
            input2 = true;
        } else{
            input2= false;
       }
    }
//}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// drag
if (grab == false)
{
    exit;
}
else
{
    x = mouse_x + xx;
    y = mouse_y + yy;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///position settings
grab = false;

if (inBox == 0){ //was not in  a box
    inst = instance_place(x, y, obj_box);
    
    if (inst == noone){ //does not collide with box
        x = setX;  // return to initial pos
        y = setY;  // return to initial pos
    }
    
    else{ //collides with box
        if (inst.object_inside != 0){
            with (inst.object_inside){
                x = setX;
                y = setY;
                inBox = 0;
            }
        }
        else {
            inst.object_inside = self.id;
        }
        
        x = inst.x;
        y = inst.y;
    
        inst.object_inside = self.id;
        
        inBox = inst.id; //the gate is inside this box
    }
}
//if was previously in a box
else{
    inst = instance_place(x, y, obj_box);
    
    //and now is outside a box
    if (inst == noone){
        x = setX;  // return to initial pos
        y = setY;  // return to initial pos
        
        inBox.object_inside = 0;
        //with (inBox){ //reset all values
          //  object_inside = 0;
        //}
        inBox = 0;
    }
    
    //and is again inside a box
    else{
        
        //if in the box there is allready a gate
        if (inst.object_inside != 0){
            
            
            
            inst.object_inside.x = inBox.x;
            inst.object_inside.y = inBox.y;
            inst.object_inside.inBox = inBox;
            inst.object_inside.inBox.object_inside = inst.object_inside.id;
            inst.object_inside.inBox.object_inside.flag = false;
            inst.object_inside.flag = false;
            
            /*
            var tempInBox = inBox;
            with (inst.object_inside){
                //set the object in the new box to the old box position.
                x = tempInBox.x;
                y = tempInBox.y;
                inBox = tempInBox;
                inBox.onbject_inside = self.id;
                show_debug_message("its me 3");
            }
            */
        }
        
        //if the box is empty
        else {
            //reset old box to not hold any gate and update the new inBox value.
            inst.object_inside = self.id;
            inBox.object_inside = 0;
        }
        
        x = inst.x;
        y = inst.y;
                
        inst.object_inside = self.id;

        inBox = inst.id; //the gate is inside this box
    }
}
if (changed){
    disable_wire(wire);
    changed = !changed;
}
flag = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///drag
grab = true;
depth = -20;
//get relative click position
xx = x - mouse_x;
yy = y - mouse_y;


//check if was allready in a box
var inst = instance_place(x, y, obj_box);
if (inst != noone &amp;&amp; inBox ==0){
    inBox = inst.id;
    
show_debug_message("inBox: "+string(inBox));
show_debug_message("object inside box: "+string(inBox.object_inside));
show_debug_message("self id: "+string(self.id));
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
